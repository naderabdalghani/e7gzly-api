openapi: 3.0.3
info:
  title: E7gzly Docs
  description: RESTful API for an automated ticket reservation web app for Egyptian Premier League football matches
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000
paths:
  /account/login/:
    post:
      operationId: account_login
      description: Authenticate a user and provide an access token
      tags:
      - Account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  maxLength: 50
                password:
                  type: string
                  format: password
              example:
                username: muhanadAtef23
                password: m827hf#$
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 22640f11bb3c01604681120afdec28295d6b5280
          description: Created token key
        401:
          content:
            text/plain:
              schema:
                type: string
                example: Incorrect credentials
          description: Unauthorized. Incorrect credentials
  /account/registration/:
    post:
      operationId: account_registration
      description: Register a new unauthorized user
      tags:
      - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      reservations:
                        example: []

          description: User created
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  role: [Cannot create a user with the given role]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        409:
          content:
            text/plain:
              schema:
                type: string
                example: A user with the given username already exists
          description: 'A user with the given username/email already exists'
  /users/authorize/:
    patch:
      operationId: authorize_account
      description: Authorize a user account
      tags:
      - Account
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
        description: Supplied token must be of an Admin account
      - in: query
        name: user_id
        schema:
          type: string
          example: 3fa85f6457174562b3fc2c963f66afa6
        required: true
      responses:
        204:
          description: No response body
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token belongs to a non-admin user account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  user_id: [There is no user with the given id]
          description: There is no user with the given id
  /matches/:
    get:
      operationId: get_matches
      description: Retrieve a list of matches
      parameters:
      - in: query
        name: matches_per_page
        schema:
          type: integer
          default: 20
      - in: query
        name: page_number
        schema:
          type: integer
          default: 1
      tags:
      - Matches
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
          description: Array of retrieved matches
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  page_number: [A valid integer is required.]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
    post:
      operationId: create_match
      description: Create a new match event
      tags:
      - Matches
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        description: Supplied token must be of an authorized Manager account
        required: true
      requestBody:
        content:
          application/json:
            schema:
               allOf:
                - $ref: '#/components/schemas/MatchBase'
                - type: object
                  properties:
                    match_venue:
                      type: string
                      format: uuid
                      example: 66fdd7c816294870af211aa00a23fe0b
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Match'
                  - type: object
                    properties:
                      seats:
                        example: []
          description: Match added
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  away_team: [This field is required]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token either belongs to a non-manager user account or an unauthorized manager account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_venue:
                    type: array
                    items:
                      type: string
                example:
                  match_venue: [There is no stadium with the given id]
          description: Given stadium id doesn't exist
    put:
      operationId: update_match
      description: Update the details of an existing match
      tags:
      - Matches
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        description: Supplied token must be of an authorized Manager account
        required: true
      requestBody:
        content:
          application/json:
            schema:
               allOf:
                - $ref: '#/components/schemas/MatchBase'
                - type: object
                  properties:
                    _id:
                      readOnly: false
                    match_venue:
                      type: string
                      format: uuid
                      example: 66fdd7c816294870af211aa00a23fe0b
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: Edited match
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  away_team: [This field is required]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token either belongs to a non-manager user account or an unauthorized manager account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: array
                    items:
                      type: string
                example:
                  _id: [There is no match with the given id]
          description: Given match/stadium id doesn't exist
  /seats/:
    get:
      operationId: get_user_reservations
      description: Retrieve reserved seats for a user
      tags:
      - Reservations
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
          description: Array of reserved seats
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
    post:
      operationId: reserve_seat
      description: Reserve a vacant seat for a match
      tags:
      - Reservations
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
        description: Token key must belong to an authorized User i.e User.authorized = true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: string
                  format: uuid
                  example: 211d75a398e3473ea2bd063b680066dc
                seat_id:
                  type: string
                  example: A6
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Seat'
                - type: object
                  properties:
                    user:
                      allOf:
                      - $ref: '#/components/schemas/UserBase'
                      - type: object
                        properties:
                          authorized:
                            example: true
          description: Seat reserved
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  seat_id: [Invalid seat_id]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token belongs to an unauthorized user account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_id:
                    type: array
                    items:
                      type: string
                example:
                  match_id: [There is no match with the given id]
          description: Given match_id doesn't exist
        409:
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_id:
                    type: array
                    items:
                      type: string
                example:
                  seat_id: [Seat is already reserved]
          description: Seat is already reserved
    delete:
      operationId: cancel_reservation
      description: Cancel a ticket reservation
      tags:
      - Reservations
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
        description: Token key must belong to an authorized User i.e User.authorized = true
      - in: query
        name: ticket_id
        schema:
          type: string
          format: uuid
          example: e415e8a1b8c34482b498f1948b4f936a
        required: true
      responses:
        204:
          description: No response body
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticket_id:
                    type: array
                    items:
                      type: string
                example:
                  ticket_id: [Reservations can be cancelled in at least 3 days before the corresponding event]
          description: Permission denied because either the match event for which the ticket is reserved is about to start in less than 3 days or the supplied token belongs to an unauthorized user account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticket_id:
                    type: array
                    items:
                      type: string
                example:
                  ticket_id: [There is no reservation with the given id]
          description: Given ticket_id doesn't exist for the user who submitted the request
  /stadiums/:
    get:
      operationId: get_stadiums
      description: Retrieve a list of all stadiums
      tags:
      - Stadiums
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StadiumBase'
          description: Array of retrieved stadiums
    post:
      operationId: add_stadium
      description: Add a new stadium
      tags:
      - Stadiums
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        description: Supplied token must be of an authorized Manager account
        required: true
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/StadiumBase'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Stadium'
                  - type: object
                    properties:
                      matches:
                        example: []
          description: Stadium added
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  vip_rows: [This field is required]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token either belongs to a non-manager user account or an unauthorized manager account
  /users/:
    get:
      operationId: get_users
      description: Retrieve a list of users
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        description: Supplied token must be of an Admin account
        required: true
      - in: query
        name: unauthorized
        schema:
          type: boolean
          default: false
        description: Retrieve only unauthorized users if set to true
      - in: query
        name: users_per_page
        schema:
          type: integer
          default: 20
      - in: query
        name: page_number
        schema:
          type: integer
          default: 1
      tags:
      - Users
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBase'
          description: Array of retrieved users
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  page_number: [A valid integer is required.]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token belongs to a non-admin user account
    put:
      operationId: edit_user_profile
      description: Update user personal info
      tags:
      - Users
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
      requestBody:
        content:
          application/json:
            schema:
               allOf:
                - $ref: '#/components/schemas/UserBase'
                - type: object
                  properties:
                    username:
                      readOnly: true
                    email:
                      readOnly: true
                    password:
                      readOnly: true
                    role:
                      readOnly: true
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBase'
          description: Edited user
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  last_name: [This field is required]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
    patch:
      operationId: change_user_password
      description: Update user password
      tags:
      - Users
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                old_password:
                  type: string
                  format: password
                  example: $5fka#J3h2
                new_password:
                  type: string
                  format: password
                  example: dsjf4HS@f
        required: true
      responses:
        204:
          description: No response body
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  new_password: [This field is required]
          description: Bad request. Some field is missing or doesn't comply with a logical constraint
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  old_password: [Incorrect old password]
          description: Incorrect credentials
    delete:
      operationId: users_destroy
      description: Delete an existing user
      tags:
      - Users
      security:
      - TokenAuthentication: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          example: Bearer 22640f11bb3c01604681120afdec28295d6b5280
        required: true
        description: Supplied token must be of an Admin account
      - in: query
        name: user_id
        schema:
          type: string
          example: 3fa85f6457174562b3fc2c963f66afa6
        required: true
      responses:
        204:
          description: No response body
        401:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authorization credentials were not provided.
          description: Unauthorized. Could be an invalid/missing user token
        403:
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: You do not have permission to perform this action.
          description: Permission denied. The supplied token belongs to a non-admin user account
        404:
          content:
            application/json:
              schema:
                type: object
                properties:
                  bad_field:
                    type: array
                    items:
                      type: string
                example:
                  user_id: [There is no user with the given id]
          description: There is no user with the given id
components:
  securitySchemes:
    TokenAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HomeTeamEnum:
      enum:
      - al ahly sc
      - zamalek sc
      - el gouna fc
      - al masry sc
      - pyramids fc
      - enppi sc
      - misr lel makkasa sc
      - ceramica cleopatra fc
      - smouha sc
      - national bank of egypt sc
      - ghazl el mahalla sc
      - al ittihad alexandria club
      - aswan sc
      - ismaily sc
      - tala'ea el gaish sc
      - al mokawloon al arab sc
      - wadi degla sc
      - el entag el harby sc
      type: string
      example: al ahly sc
    AwayTeamEnum:
      enum:
      - al ahly sc
      - zamalek sc
      - el gouna fc
      - al masry sc
      - pyramids fc
      - enppi sc
      - misr lel makkasa sc
      - ceramica cleopatra fc
      - smouha sc
      - national bank of egypt sc
      - ghazl el mahalla sc
      - al ittihad alexandria club
      - aswan sc
      - ismaily sc
      - tala'ea el gaish sc
      - al mokawloon al arab sc
      - wadi degla sc
      - el entag el harby sc
      type: string
      example: zamalek sc
    CityEnum:
      enum:
      - cairo
      - alexandria
      - giza
      - shubra el-kheima
      - port said
      - suez
      - luxor
      - al-mansura
      - el-mahalla el-kubra
      - tanta
      - asyut
      - ismailia
      - fayyum
      - zagazig
      - aswan
      - damietta
      - damanhur
      - al-minya
      - beni suef
      - qena
      - sohag
      - hurghada
      - 6th of october city
      - shibin el kom
      - banha
      - kafr el-sheikh
      - arish
      - mallawi
      - 10th of ramadan city
      - bilbais
      - marsa matruh
      - idfu
      - mit ghamr
      - al-hamidiyya
      - desouk
      - qalyub
      - abu kabir
      - kafr el-dawwar
      - girga
      - akhmim
      - matareya
      type: string
    RoleEnum:
      enum:
      - fan
      - manager
      - admin
      type: string
    GenderEnum:
      enum:
      - male
      - female
      - other
      type: string
    UserBase:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
          example: 3fa85f6457174562b3fc2c963f66afa6
        username:
          type: string
          maxLength: 50
          example: muhanadAtef23
        email:
          type: string
          format: email
          example: muhanad96@yahoo.com
        password:
          type: string
          format: password
          example: $5fka#J3h2
        first_name:
          type: string
          maxLength: 50
          example: Muhanad
        last_name:
          type: string
          maxLength: 50
          example: Atef
        birthdate:
          type: string
          format: date
          description: minimum age is 16
          example: 1998-02-28
        gender:
          $ref: '#/components/schemas/GenderEnum'
        city:
          $ref: '#/components/schemas/CityEnum'
        address:
          type: string
          maxLength: 200
          example: Maadi 9th St.
        role:
          $ref: '#/components/schemas/RoleEnum'
        authorized:
          type: boolean
          default: False
          readOnly: true
      required:
      - _id
      - username
      - email
      - password
      - first_name
      - last_name
      - birthdate
      - gender
      - city
      - role
      - authorized
    SeatBase:
      type: object
      properties:
        ticket_id:
          type: string
          format: uuid
          readOnly: true
          example: e415e8a1b8c34482b498f1948b4f936a
        seat_id:
          type: string
          maxLength: 20
          example: A6
      required:
      - seat_id
      - ticket_id
    StadiumBase:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
          example: 66fdd7c816294870af211aa00a23fe0b
        name:
          type: string
          maxLength: 100
          example: Borg El Arab Stadium
        capacity:
          type: integer
          minimum: 1000
          example: 86000
        vip_seats_per_row:
          type: integer
          minimum: 10
          maximum: 50
          example: 25
        vip_rows:
          type: integer
          minimum: 1
          maximum: 20
          example: 10
      required:
      - _id
      - capacity
      - name
      - vip_rows
      - vip_seats_per_row
    MatchBase:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
          example: 211d75a398e3473ea2bd063b680066dc
        home_team:
          $ref: '#/components/schemas/HomeTeamEnum'
        away_team:
          $ref: '#/components/schemas/AwayTeamEnum'
        date:
          type: string
          format: date-time
          example: 2021-03-19T07:00:00Z
        referee:
          type: string
          maxLength: 50
          example: Lauree Ollerhead
        linesmen:
          type: array
          items:
            type: string
            maxLength: 50
          minItems: 2
          example: [Peirce Ritzman, Maurie Probey]
      required:
      - _id
      - home_team
      - away_team
      - date
      - referee
      - linesmen
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            reservations:
              type: array
              items:
                $ref: '#/components/schemas/SeatBase'
              readOnly: true
    Seat:
      allOf:
        - $ref: '#/components/schemas/SeatBase'
        - type: object
          properties:
            match:
              $ref: '#/components/schemas/MatchBase'
              readOnly: true
            user:
              $ref: '#/components/schemas/UserBase'
              readOnly: true
    Stadium:
      allOf:
        - $ref: '#/components/schemas/StadiumBase'
        - type: object
          properties:
            matches:
              type: array
              items:
                $ref: '#/components/schemas/MatchBase'
              readOnly: true
    Match:
      allOf:
        - $ref: '#/components/schemas/MatchBase'
        - type: object
          properties:
            match_venue:
              $ref: '#/components/schemas/StadiumBase'
              readOnly: true
            seats:
              type: array
              items:
                $ref: '#/components/schemas/SeatBase'
              readOnly: true
